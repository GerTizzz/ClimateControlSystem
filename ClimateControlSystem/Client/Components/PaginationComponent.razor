@implements IAsyncDisposable
@using ClimateControlSystem.Client.PagesNavigation

<div class="panel panel-default border collapsed">
    <div class="panel-heading alert-primary">
        <h3 class="panel-title">Goodwill PKW/smart</h3>
    </div>
</div>

<div class="panel panel-default border">
    <div class="panel-heading alert-primary">
        <h3 class="panel-title">Goodwill PKW/smart</h3>
    </div>
</div>

<table align="center">
    <tbody>
        <tr>
            @foreach (var pageButton in _paginationManager.PaginationButtons)
            {
                if (pageButton.IsEnabled)
                {
                    <td style="font-size:medium">
                        <button class="btn-primary" @onclick="@(e => pageButton.ChangePage())">
                            @(pageButton.Title)
                        </button>
                    </td>
                }
                else
                {
                    <td style="font-size:medium">
                        <button class="btn-primary" style="background-color:cadetblue">
                            @(pageButton.Title)
                        </button>
                    </td>
                }
            }
        </tr>
    </tbody>
</table>

@code {
    private PaginationButtonManager _paginationManager;

    [Parameter]
    public int RecordsCount { get; set; }
    [Parameter]
    public int RecordsPerPage { get; set; } 

    [Parameter]
    public EventCallback<Tuple<int, int>> PageChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _paginationManager = new PaginationButtonManager(RecordsCount, RecordsPerPage);

        _paginationManager.PageChangedEvent += OnPageChaned;
    }

    public async Task OnPageChaned(Tuple<int, int> arg)
    {
        await PageChanged.InvokeAsync(new Tuple<int, int>(arg.Item1, arg.Item2));
    }

    public async ValueTask DisposeAsync()
    {
        if (_paginationManager is not null)
        {
            _paginationManager.PageChangedEvent -= OnPageChaned;
            _paginationManager.Close();
        }
    }

    private void UpdateNumberPages(int startIndex, int endIndex)
    {
        //for (int i = SkippingNotNumberPages; i < PagesWithNumbersCount + SkippingNotNumberPages; i++)
        //{
        //    int step = startIndex + i - SkippingNotNumberPages;

        //    if (step <= endIndex)
        //    {
        //        PaginationButtons[i].PageNumber = step;
        //        PaginationButtons[i].Enable();
        //        PaginationButtons[i].IsActivePage = false;

        //        if (step == CurrentPageNumber)
        //        {
        //            PaginationButtons[i].IsActivePage = true;
        //        }
        //    }
        //}
    }
}
