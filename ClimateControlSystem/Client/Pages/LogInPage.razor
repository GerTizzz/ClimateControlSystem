@page "/login"
@inject IAuthenticationService AuthService
@inject NavigationManager NavManager

<h3>Войти</h3>

@if (showAuthenticationError)
{
    <div class="alert alert-danger" role="alert">
        <p>@authenticationErrorText</p>
    </div>
}

<EditForm Model="model" OnValidSubmit="ExecuteLogin" class="card card-body bg-light mt-5">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="from-group row">
        <label for="username" class="col-md-2 col-form-label">Имя:</label>
        <div class="col-md-10">
            <InputText id="username" class="form-control" @bind-Value="model.Name"/>
            <ValidationMessage For="@(() => model.Name)"/>
        </div>
    </div>

    <div class="from-group row">
        <label for="password" class="col-md-2 col-form-label">Пароль:</label>
        <div class="col-md-10">
            <InputText type="password" id="password" class="form-control" @bind-Value="model.Password" />
            <ValidationMessage For="@(() => model.Password)" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-success">Войти</button>
        </div>
    </div>

</EditForm>

@code {
    private UserDTO model = new();

    private bool showAuthenticationError = false;

    private string authenticationErrorText = string.Empty;

    private async Task ExecuteLogin()
    {
        showAuthenticationError = false;

        bool result = await AuthService.Login(model);

        if (result)
        {
            NavManager.NavigateTo("/");
        }
        else
        {
            authenticationErrorText = "Доступ запрещен.";
            showAuthenticationError = true;
        }
    }
}
