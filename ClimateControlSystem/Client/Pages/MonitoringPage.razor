@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using ClimateControlSystem.Client.Resources
@inject NavigationManager NavigationManager
@inject IMicroclimateService MicroclimateService
@inject IConfigService ConfigService
@implements IAsyncDisposable
@inject IJSRuntime JsRuntime

<PageTitle>Monitoring Page</PageTitle>

<h3>Панель мониторинга</h3>

<AuthorizeView>
    <Authorized>
        @if (_temperatureRenderableSeries is null || _humidityRenderableSeries is null
        || _temperatureRenderableSeries.Count == 0 || _humidityRenderableSeries.Count == 0)
        {
            <p><em>Загрузка...</em></p>
        }
        else
        {
            <Line @ref="_temperatureChart" Data="_temperatureRenderableSeries" Config="_temperatureDataLineConfig"/>
            <Line @ref="_humidityChart" Data="_humidityRenderableSeries" Config="_humidityDataLineConfig"/>
        }
    </Authorized>
    <NotAuthorized>
        Вы не вошли в систему
    </NotAuthorized>
</AuthorizeView>

@code {
    private ConfigResponse _config;

    private const int _recordsCount = 15;
    private const int _recordsRequsetBeginningIndex = 0;

    private Line _temperatureChart;
    private Line _humidityChart;

    private LineConfig _temperatureDataLineConfig;
    private LineConfig _humidityDataLineConfig;

    private List<GraphicData> _temperatureRenderableSeries;
    private List<GraphicData> _humidityRenderableSeries;

    private List<PredictionResponse> _monitorings;

    private HubConnection? _monitoringConnection;

    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authState;

        if (authState.User.Identity.IsAuthenticated)
        {
            _config = await ConfigService.GetConfigAsync();
            _monitorings = (await MicroclimateService.GetMonitoringsAsync(_recordsRequsetBeginningIndex, _recordsCount))
            .ToList();
            _monitorings.Capacity = _recordsCount;

            UpdateRenderableSeries();
            UpdateChartsConfigs();

            await CreateMonitoringConnection();
        }
    }

    private async Task CreateMonitoringConnection()
    {
        _monitoringConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/monitoringhub"))
            .WithAutomaticReconnect()
            .Build();

        _monitoringConnection.On<MonitoringResponse>("GetMonitoringResponse", (newData) => MonitoringDataArrived(newData));

        await _monitoringConnection.StartAsync();
    }

    private async Task MonitoringDataArrived(MonitoringResponse monitoring)
    {
        try
        {
            if (_monitorings is null)
            {
                return;
            }

            DateTimeOffset? predictedTime = null;

            if (_monitorings.Any())
            {
                var lastMonitoring = _monitorings.Last();
                lastMonitoring = UpdateMonitoringWithSensorsData(monitoring, lastMonitoring);
                predictedTime = lastMonitoring.MeasurementTime;
            }
            else
            {
                var firstMonitroing = UpdateMonitoringWithSensorsData(monitoring, new PredictionResponse());
                _monitorings.Add(firstMonitroing);
                predictedTime = DateTimeOffset.Now;
            }

            _ = Task.Run(() => TemperatureEventArrived(monitoring));
            _ = Task.Run(() => HumidityEventArrived(monitoring));

            var newMonitoring = new PredictionResponse()
                {
                    PredictedFutureHumidity = monitoring.HumidityPredictionForFuture,
                    PredictedFutureTemperature = monitoring.TemperaturePredictionForFuture,
                    MeasurementTime = predictedTime.Value.AddSeconds(_config.PredictionTimeIntervalSeconds)
                };

            _monitorings.Add(newMonitoring);

            RemoveExtraMonitroingElementsFromBeginning();

            await UpdateCharts();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private PredictionResponse UpdateMonitoringWithSensorsData(MonitoringResponse newMonitoring, PredictionResponse existingMonitoring)
    {
        existingMonitoring.CurrentRealTemperature = newMonitoring.MeasuredTemperature;
        existingMonitoring.CurrentRealHumidity = newMonitoring.MeasuredHumidity;

        if (newMonitoring.PreviousHumidityPredicitionAccuracy.HasValue)
        {
            existingMonitoring.PredictedHumidityAccuracy = newMonitoring.PreviousHumidityPredicitionAccuracy;
        }

        if (newMonitoring.PreviousTemperaturePredictionAccuracy.HasValue)
        {
            existingMonitoring.PredictedTemperatureAccuracy = newMonitoring.PreviousTemperaturePredictionAccuracy;
        }

        return existingMonitoring;
    }

    private async Task TemperatureEventArrived(MonitoringResponse monitoring)
    {
        try
        {
            if (monitoring.TemperaturePredictionEvent is null)
            {
                return;
            }

            string alertMessage = GetTemperatureAlertMessage(monitoring.TemperaturePredictionEvent, monitoring.MeasurementTime);

            if (string.IsNullOrEmpty(alertMessage) is false)
            {
                await JsRuntime.InvokeVoidAsync("Alert", alertMessage);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task HumidityEventArrived(MonitoringResponse monitoring)
    {
        try
        {
            if (monitoring.HumidityPredictionEvent is null)
            {
                return;
            }

            string alertMessage = GetHumidityAlertMessage(monitoring.HumidityPredictionEvent, monitoring.MeasurementTime);

            if (string.IsNullOrEmpty(alertMessage) is false)
            {
                await JsRuntime.InvokeVoidAsync("Alert", alertMessage);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_monitoringConnection is not null)
        {
            await _monitoringConnection.DisposeAsync();
        }
    }

    private void RemoveExtraMonitroingElementsFromBeginning()
    {
        while (_monitorings.Count >= _monitorings.Capacity)
        {
            _monitorings.RemoveAt(0);
        }
    }

    private async Task UpdateCharts()
    {
        UpdateRenderableSeries();
        UpdateChartsConfigs();
        await RerenderCharts();
    }

    private void UpdateRenderableSeries()
    {
        _temperatureRenderableSeries = AntChartHelper.GetTemperatureData(_monitorings, _config);
        _humidityRenderableSeries = AntChartHelper.GetHumidityData(_monitorings, _config);
    }

    private void UpdateChartsConfigs()
    {
        if (_temperatureRenderableSeries.Any())
        {
            _temperatureDataLineConfig = AntChartHelper.GetTemperatureLineConfig(_temperatureRenderableSeries);
        }
        if (_humidityRenderableSeries.Any())
        {
            _humidityDataLineConfig = AntChartHelper.GetHumidityLineConfig(_humidityRenderableSeries);
        }
    }

    private async Task RerenderCharts()
    {
        await _temperatureChart.ChangeData(_temperatureRenderableSeries);
        await _humidityChart.ChangeData(_humidityRenderableSeries);
    }

    private string GetTemperatureAlertMessage(TemperatureEventResponse tempEvent, DateTimeOffset eventTime)
    {
        string alertMessage = "";

        if (tempEvent.Value > 0)
        {
            alertMessage += $"{eventTime.ToString("HH:mm:ss dd.MM.yyyy")}: Ожидается превышение температуры выше допустимого предела!";
        }
        else if (tempEvent.Value < 0)
        {
            alertMessage += $"{eventTime.ToString("HH:mm:ss dd.MM.yyyy")}: Ожидается понижение температуры ниже допустимого предела!";
        }

        return alertMessage;
    }

    private string GetHumidityAlertMessage(HumidityEventResponse humEvent, DateTimeOffset eventTime)
    {
        string alertMessage = "";

        if (humEvent.Value > 0)
        {
            alertMessage += $"{eventTime.ToString("HH:mm:ss dd.MM.yyyy")}: Ожидается превышение влажности выше допустимого предела!";
        }
        else if (humEvent.Value < 0)
        {
            alertMessage += $"{eventTime.ToString("HH:mm:ss dd.MM.yyyy")}: Ожидается понижение влажности ниже допустимого предела!";
        }

        return alertMessage;
    }
}
