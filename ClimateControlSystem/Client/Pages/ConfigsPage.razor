@page "/configspage"
@using ClimateControlSystem.Shared.Common;
@using ClimateControlSystem.Client.Resources
@attribute [Authorize(Roles = "Admin")]
@inject IConfigService ConfigService

<PageTitle>Configs Page</PageTitle>

<h3>Настройки конфигурации</h3>

<EditForm Model="_config" OnSubmit="HandleSubmit">
    <div>
        <label for="uppTempWarn">Верхний тревожный предел температуры, C</label>
        <InputNumber id="uppTempWarn" @bind-Value="_config.UpperTemperatureWarningLimit" />
    </div>
    <div>
        <label for="lowTempWarn">Нижний тревожный предел температуры, C</label>
        <InputNumber id="lowTempWarn" @bind-Value="_config.LowerTemperatureWarningLimit" />
    </div>

    <div>
        <label for="uppHumWarn">Верхний тревожный предел абсолютной влажности, г/м^3</label>
        <InputNumber id="uppHumWarn" @bind-Value="_config.UpperHumidityWarningLimit" />
    </div>
    <div>
        <label for="lowHumWarn">Нижний тревожный предел абсолютной влажности, г/м^3</label>
        <InputNumber id="lowHumWarn" @bind-Value="_config.LowerHumidityWarningLimit" />
    </div>   
    <div>
        <label for="predictionTimeInterval">Интервал прогнозирования, с</label>
        <InputNumber id="predictionTimeInterval" @bind-Value="_config.PredictionTimeIntervalSeconds" />
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Сохранить</button>
</EditForm>

@code {
    ConfigsDTO _config = new ConfigsDTO();

    string gg = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _config = await ConfigService.GetConfigAsync();
    }

    async Task HandleSubmit()
    {
        bool isUpdated = await ConfigService.UpdateConfigAsync(_config);

        if (isUpdated is false)
        {
            _config = await ConfigService.GetConfigAsync();
        }
    }
}