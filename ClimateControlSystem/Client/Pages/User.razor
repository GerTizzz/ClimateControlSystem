@page "/user"
@page "/user/{id:int}"
@attribute [Authorize(Roles = "Admin")]
@inject IUserService UserService

@if (Id == null)
{
    <PageTitle>Создание нового пользователя</PageTitle>
    <h3>Создайте нового пользователя</h3>
}
else
{
    <PageTitle>Редактировать @user.Name</PageTitle>
    <h3>Редактировать @user.Name</h3>
}

<EditForm Model="user" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Имя</label>
        <InputText id="name" @bind-Value="user.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="role">Роль</label>
        <InputText id="role" @bind-Value="user.Role" class="form-control"></InputText>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteUser">Удалить пользователя</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    UserModel user = new UserModel();

    string btnText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Создать пользователя" : "Редактировать пользователя";
        await SuperHeroService.GetComics();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            //user.Comic = SuperHeroService.Comics.First();
            //user.ComicId = user.Comic.Id;
        }
        else
        {
            user = await SuperHeroService.GetSingleSuperHero(Id.Value);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await SuperHeroService.CreateHero(user);
        }
        else
        {
            await SuperHeroService.UpdateHero(user);
        }
    }

    async Task DeleteUser()
    {
        await SuperHeroService.DeleteHero(user.Id);
    }
}