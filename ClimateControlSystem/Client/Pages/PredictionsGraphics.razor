@page "/predictionsgraphics"
@using ClimateControlSystem.Client.Resources
@inject IClimateService ClimateService

<PageTitle>Predictions Journal</PageTitle>

<h3>Графики прогнозов</h3>

<AuthorizeView>
    <Authorized>
        @if (Monitorings == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            if (HasData)
            {
                <Line Data="ActualAndPredictedTemperature" Config="TemperatureDataLineConfig"/>
                <Line Data="ActualAndPredictedHumidity" Config="HumidityDataLineConfig"/>
@*                <Line Data="Accuracy" Config="AccuracyLineConfig"/>
*@            }
            else
            {
                <p><em>Sorry, no data to show...</em></p>
            }
        }
    </Authorized>
    <NotAuthorized>
        Вы не вошли в систему
    </NotAuthorized>
</AuthorizeView>

@code{
    List<Prediction> Monitorings;

    bool HasData = false;

    LineConfig TemperatureDataLineConfig;
    LineConfig HumidityDataLineConfig;
    LineConfig AccuracyLineConfig;

    List<GraphicData<string, float>> ActualAndPredictedTemperature;
    List<GraphicData<string, float>> ActualAndPredictedHumidity;
    //List<GraphicData<string, float>> Accuracy;

    protected override async Task OnInitializedAsync()
    {
        Monitorings = await ClimateService.GetClimatePredictionsAsync(25);

        HasData = Monitorings.Count >= 2;

        if (HasData is false)
        {
            return;    
        }

        ActualAndPredictedTemperature = GetTemperatureData(Monitorings);
        ActualAndPredictedHumidity = GetHumidityData(Monitorings);
        //Accuracy = GetAccuracyData(Monitorings);

        TemperatureDataLineConfig = GetTemperatureLineConfig();
        HumidityDataLineConfig = GetHumidityDataConfig();
        //AccuracyLineConfig = GetAccuracyConfig();
    }

    private List<GraphicData<string, float>> GetTemperatureData(List<Prediction> monitorings)
    {
        List<GraphicData<string, float>> temperatureData = new List<GraphicData<string, float>>();

        for (int i = 0; i < Monitorings.Count; i++)
        {
            temperatureData.Add(new GraphicData<string, float>(Monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                Monitorings[i].PredictedTemperature, "Predicted"));
            temperatureData.Add(new GraphicData<string, float>(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                24f, "Limit"));

            if (i > 0)
            {
                temperatureData.Add(new GraphicData<string, float>(Monitorings[i - 1].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                    Monitorings[i].RealTemperature.Value, "Measured"));
            }
        }

        return temperatureData;
    }

    private List<GraphicData<string, float>> GetHumidityData(List<Prediction> monitorings)
    {
        List<GraphicData<string, float>> humidityData = new List<GraphicData<string, float>>();

        for (int i = 0; i < monitorings.Count; i++)
        {
            humidityData.Add(new GraphicData<string, float>(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                monitorings[i].PredictedHumidity, "Predicted"));
            humidityData.Add(new GraphicData<string, float>(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                21f, "Limit"));

            if (i > 0)
            {
                humidityData.Add(new GraphicData<string, float>(monitorings[i - 1].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                    monitorings[i].RealHumidity.Value, "Measured"));
            }
        }

        return humidityData;
    }

    //private List<GraphicData<string, float>> GetAccuracyData(List<Prediction> monitorings)
    //{
    //    List<GraphicData<string, float>> temperatureAccuracy = new List<GraphicData<string, float>>();

    //    for (int i = 0; i < monitorings.Count; i++)
    //    {
    //        if (monitorings[i].PredictedHumidityAccuracy.HasValue is false || monitorings[i].PredictedTemperatureAccuracy.HasValue is false)
    //        {
    //            continue;
    //        }

    //        temperatureAccuracy.Add(new GraphicData<string, float>(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
    //            monitorings[i].PredictedTemperatureAccuracy, "Temperature"));

    //        temperatureAccuracy.Add(new GraphicData<string, float>(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
    //            monitorings[i].PredictedHumidityAccuracy.Value, "Humidity"));

    //        temperatureAccuracy.Add(new GraphicData<string, float>(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
    //            100f, "Limit"));
    //    }

    //    return temperatureAccuracy;
    //}

    private LineConfig GetTemperatureLineConfig()
    {
        var config = GetBaseLineConfig();

        config.Title.Text = "Действительная и спрогнозированная температуры";
        config.YAxis.Title.Text = "Градусы °C";
        var min = ActualAndPredictedTemperature.Min(item => item.Y);
        var max = ActualAndPredictedTemperature.Max(item => item.Y);
        var delta = max - min;
        config.YAxis.Max = max + delta / 10;
        config.YAxis.Min = min - delta / 10;

        return config;
    }

    private LineConfig GetHumidityDataConfig()
    {
        var config = GetBaseLineConfig();

        config.Title.Text = "Действительная и спрогнозированная влажности";
        config.YAxis.Title.Text = "Показатели влажности %";
        var min = ActualAndPredictedHumidity.Min(item => item.Y);
        var max = ActualAndPredictedHumidity.Max(item => item.Y);
        var delta = max - min;
        config.YAxis.Max = max + delta / 10;
        config.YAxis.Min = min - delta / 10;
        config.Point.Shape = "circle";

        return config;
    }

    //private LineConfig GetAccuracyConfig()
    //{
    //    var config = GetBaseLineConfig();

    //    config.Title.Text = "Точность прогноза температуры";
    //    config.YAxis.Title.Text = "Точнсть прогноза %";
    //    var min = Accuracy.Min(item => item.Y);
    //    var max = Accuracy.Max(item => item.Y);
    //    var delta = max - min;
    //    config.YAxis.Max = max + delta / 10;
    //    config.YAxis.Min = min - delta / 10;
    //    config.Point.Shape = "square";

    //    return config;
    //}

    private LineConfig GetBaseLineConfig()
    {
        return new LineConfig()
        {
            Title = new Title()
            {
                Visible = true,
                Style = new TextStyle()
                {
                    Fill = "#000",
                    FontSize = 20
                }
            },
            Padding = "auto",
            ForceFit = true,
            XField = "time",
            YField = "value",
            SeriesField = "type",
            Point = new LineViewConfigPoint()
            {
                Style = new GraphicStyle() { LineWidth = 3, FillOpacity = 5 },
                Size = 7,
                Visible = true,
                Shape = "diamond"
            },
            LineStyle = new LineStyle()
            {
                LineWidth = 5
            },
            Legend = new Legend()
            {
                Position = "top-right",
                Text = new LegendText()
                {
                    Style = new TextStyle()
                    {
                        Fill = "#000",
                        FontSize = 20
                    }
                }
            },
            XAxis = new ValueCatTimeAxis()
            {
                Title = new BaseAxisTitle()
                {
                    Text = "Время",
                    Style = new TextStyle()
                    {
                        FontSize = 16
                    },
                    Visible = true
                },
                Visible = true,
                TickLine = new BaseAxisTickLine()
                {
                    Visible = true,
                    Style = new LineStyle()
                    {
                        LineWidth = 2,
                        Stroke = "#aaa"
                    },
                },
                Line = new BaseAxisLine()
                {
                    Visible = true,
                    Style = new LineStyle()
                    {
                        Stroke = "#aaa"
                    }
                },
                Grid = new BaseAxisGrid()
                {
                    Visible = true,
                    Line = new BaseAxisGridLine()
                    {
                        Type = "",
                        Style = new LineStyle()
                        {
                            Stroke = "#ddd",
                            LineDash = new int[] { 4, 2 }
                        }
                    }
                }
            },
            YAxis = new ValueAxis()
            {
                Title = new BaseAxisTitle()
                {
                    Style = new TextStyle()
                    {
                        FontSize = 16,
                    },
                    AutoRotate = true,
                    Visible = true
                },
                Visible = true
            },
        };
    }
}
