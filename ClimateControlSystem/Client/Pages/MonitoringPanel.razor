@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using ClimateControlSystem.Client.Resources
@inject NavigationManager NavigationManager
@inject IClimateService ClimateService
@implements IAsyncDisposable

<PageTitle>Monitoring Panel</PageTitle>

<h3>Панель мониторинга</h3>

<AuthorizeView>
    <Authorized>
        @if (ActualAndPredictedTemperature is null || ActualAndPredictedHumidity is null
        || ActualAndPredictedTemperature.Count == 0 || ActualAndPredictedHumidity.Count == 0)
        {
            <p><em>Загрузка...</em></p>
        }
        else
        {
            <Line @ref="TemperatureChart" Data="ActualAndPredictedTemperature" Config="TemperatureDataLineConfig"/>
            <Line @ref="HumidityChart" Data="ActualAndPredictedHumidity" Config="HumidityDataLineConfig"/>
        }
    </Authorized>
    <NotAuthorized>
        <h4>Вы не вошли в систему</h4>
    </NotAuthorized>
</AuthorizeView>

@code {
    Line TemperatureChart;
    Line HumidityChart;

    LineConfig TemperatureDataLineConfig;
    LineConfig HumidityDataLineConfig;

    List<GraphicData> ActualAndPredictedTemperature;
    List<GraphicData> ActualAndPredictedHumidity;

    List<MonitoringData> Monitorings;

    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        Monitorings = await ClimateService.GetClimateRecordsAsync(15);
        Monitorings.Capacity = 15;

        ActualAndPredictedTemperature = GetTemperatureData(Monitorings);
        ActualAndPredictedHumidity = GetHumidityData(Monitorings);

        TemperatureDataLineConfig = GetTemperatureLineConfig();
        HumidityDataLineConfig = GetHumidityLineConfig();

        await Connect();
    }

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/monitoringhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<MonitoringData>("GetMonitoringData", (newData) => MonitoringDataArrived(newData));

        await hubConnection.StartAsync();
    }

    private async Task MonitoringDataArrived(MonitoringData monitoringData)
    {
        if (Monitorings is null)
        {
            return;
        }

        if (Monitorings.Count == Monitorings.Capacity)
        {
            Monitorings.RemoveAt(0);
        }

        Monitorings.Add(monitoringData);

        ActualAndPredictedTemperature = GetTemperatureData(Monitorings);
        ActualAndPredictedHumidity = GetHumidityData(Monitorings);

        TemperatureDataLineConfig = GetTemperatureLineConfig();
        HumidityDataLineConfig = GetHumidityLineConfig();

        await TemperatureChart.UpdateChart(csData: ActualAndPredictedTemperature, csConfig: TemperatureDataLineConfig);
        await HumidityChart.UpdateChart(csData: ActualAndPredictedHumidity, csConfig: HumidityDataLineConfig);

        await TemperatureChart.Render();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private List<GraphicData> GetTemperatureData(List<MonitoringData> monitorings)
    {
        List<GraphicData> temperatureData = new List<GraphicData>();

        for (int i = 0; i < monitorings.Count; i++)
        {
            temperatureData.Add(new GraphicData(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                monitorings[i].PredictedTemperature, "Predicted"));
            temperatureData.Add(new GraphicData(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                24f, "Limit"));

            if (i > 0)
            {
                temperatureData.Add(new GraphicData(monitorings[i - 1].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                    monitorings[i - 1].PreviousTemperature, "Measured"));
            }
        }

        return temperatureData;
    }

    private List<GraphicData> GetHumidityData(List<MonitoringData> monitorings)
    {
        List<GraphicData> humidityData = new List<GraphicData>();

        for (int i = 0; i < monitorings.Count; i++)
        {
            humidityData.Add(new GraphicData(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                monitorings[i].PredictedHumidity, "Predicted"));
            humidityData.Add(new GraphicData(monitorings[i].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                21f, "Limit"));

            if (i > 0)
            {
                humidityData.Add(new GraphicData(monitorings[i - 1].MeasurementTime.ToString("HH:mm:ss dd:MM:yyyy"),
                    monitorings[i - 1].PreviousHumidity, "Measured"));
            }
        }

        return humidityData;
    }

    private LineConfig GetTemperatureLineConfig()
    {
        var config = GetBaseLineConfig();

        config.Title.Text = "Действительная и спрогнозированная температуры";
        config.YAxis.Title.Text = "Градусы °C";
        var min = ActualAndPredictedTemperature.Min(item => item.value);
        var max = ActualAndPredictedTemperature.Max(item => item.value);
        var delta = max - min;
        config.YAxis.Max = max + delta / 10;
        config.YAxis.Min = min - delta / 10;

        return config;
    }

    private LineConfig GetHumidityLineConfig()
    {
        var config = GetBaseLineConfig();

        config.Title.Text = "Действительная и спрогнозированная влажности";
        config.YAxis.Title.Text = "Показатели влажности %";
        var min = ActualAndPredictedHumidity.Min(item => item.value);
        var max = ActualAndPredictedHumidity.Max(item => item.value);
        var delta = max - min;
        config.YAxis.Max = max + delta / 10;
        config.YAxis.Min = min - delta / 10;
        config.Point.Shape = "circle";

        return config;
    }

    private LineConfig GetBaseLineConfig()
    {
        return new LineConfig()
        {
            Title = new Title()
            {
                Visible = true,
                Style = new TextStyle()
                {
                    Fill = "#000",
                    FontSize = 20
                }
            },
            Padding = "auto",
            ForceFit = true,
            XField = "time",
            YField = "value",
            SeriesField = "type",
            Point = new LineViewConfigPoint()
            {
                Style = new GraphicStyle() { LineWidth = 3, FillOpacity = 5 },
                Size = 7,
                Visible = true,
                Shape = "diamond"
            },
            LineStyle = new LineStyle()
            {
                LineWidth = 5
            },
            Legend = new Legend()
            {
                Position = "top-right",
                Text = new LegendText()
                {
                    Style = new TextStyle()
                    {
                        Fill = "#000",
                        FontSize = 20
                    }
                }
            },
            XAxis = new ValueCatTimeAxis()
            {
                Title = new BaseAxisTitle()
                {
                    Text = "Время",
                    Style = new TextStyle()
                    {
                        FontSize = 16
                    },
                    Visible = true
                },
                Visible = true,
                TickLine = new BaseAxisTickLine()
                {
                    Visible = true,
                    Style = new LineStyle()
                    {
                        LineWidth = 2,
                        Stroke = "#aaa"
                    },
                },
                Line = new BaseAxisLine()
                {
                    Visible = true,
                    Style = new LineStyle()
                    {
                        Stroke = "#aaa"
                    }
                },
                Grid = new BaseAxisGrid()
                {
                    Visible = true,
                    Line = new BaseAxisGridLine()
                    {
                        Type = "",
                        Style = new LineStyle()
                        {
                            Stroke = "#ddd",
                            LineDash = new int[] { 4, 2 }
                        }
                    }
                }
            },
            YAxis = new ValueAxis()
            {
                Title = new BaseAxisTitle()
                {
                    Style = new TextStyle()
                    {
                        FontSize = 16,
                    },
                    AutoRotate = true,
                    Visible = true
                },
                Visible = true
            },
        };
    }

}
