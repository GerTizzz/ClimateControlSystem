@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using ClimateControlSystem.Client.Resources
@inject NavigationManager NavigationManager
@inject IClimateService ClimateService
@inject IConfigService ConfigService
@implements IAsyncDisposable

<PageTitle>Monitoring Panel</PageTitle>

<h3>Панель мониторинга</h3>

<AuthorizeView>
    <Authorized>
        @if (_actualAndPredictedTemperature is null || _actualAndPredictedHumidity is null
        || _actualAndPredictedTemperature.Count == 0 || _actualAndPredictedHumidity.Count == 0)
        {
            <p><em>Загрузка...</em></p>
        }
        else
        {
            <Line @ref="_temperatureChart" Data="_actualAndPredictedTemperature" Config="_temperatureDataLineConfig"/>
            <Line @ref="_humidityChart" Data="_actualAndPredictedHumidity" Config="_humidityDataLineConfig"/>
        }
    </Authorized>
    <NotAuthorized>
        Вы не вошли в систему
    </NotAuthorized>
</AuthorizeView>

@code {
    private Config _config;

    private const int _recordsCount = 15;

    private Line _temperatureChart;
    private Line _humidityChart;

    private LineConfig _temperatureDataLineConfig;
    private LineConfig _humidityDataLineConfig;

    private List<GraphicData> _actualAndPredictedTemperature;
    private List<GraphicData> _actualAndPredictedHumidity;

    private List<Prediction> _predictions;

    private HubConnection? _hubConnection;

    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authState;

        if (authState.User.Identity.IsAuthenticated)
        {
            _config = await ConfigService.GetConfigAsync();
            _predictions = await ClimateService.GetPredictionsAsync(_recordsCount);
            _predictions.Capacity = _recordsCount;

            await UpdateConfigsAndData();

            await Connect();
        }
    }

    private async Task Connect()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/monitoringhub"))
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<Prediction>("GetMonitoringData", (newData) => MonitoringDataArrived(newData));

        await _hubConnection.StartAsync();
    }

    private async Task MonitoringDataArrived(Prediction prediction)
    {
        if (_predictions is null)
        {
            return;
        }

        if (_predictions.Count == _predictions.Capacity)
        {
            _predictions.RemoveAt(0);
        }

        _predictions.Add(prediction);

        await UpdateConfigsAndData();

        await _temperatureChart.UpdateChart(csData: _actualAndPredictedTemperature, csConfig: _temperatureDataLineConfig);
        await _humidityChart.UpdateChart(csData: _actualAndPredictedHumidity, csConfig: _humidityDataLineConfig);

        await _temperatureChart.Render();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private Task UpdateConfigsAndData()
    {
        _actualAndPredictedTemperature = AntChartHelper.GetTemperatureData(_predictions, _config.UpperTemperatureWarningLimit);
        _actualAndPredictedHumidity = AntChartHelper.GetHumidityData(_predictions, _config.UpperHumidityWarningLimit);

        _temperatureDataLineConfig = AntChartHelper.GetTemperatureLineConfig(_actualAndPredictedTemperature);
        _humidityDataLineConfig = AntChartHelper.GetHumidityLineConfig(_actualAndPredictedHumidity);

        return Task.CompletedTask;
    }
}
