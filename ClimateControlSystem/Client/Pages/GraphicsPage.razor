@page "/graphicspage"
@using ClimateControlSystem.Client.PaginationNavigation
@using ClimateControlSystem.Client.Components
@inject IMicroclimateService MicroclimateService
@inject IConfigService ConfigService

<PageTitle>Graphics Page</PageTitle>

<h3>Графики прогнозов</h3>

<AuthorizeView>
    <Authorized>
        @if (_monitorings == null || _monitorings.Count == 0)
        {
            <p>
                <em>Загрузка...</em>
            </p>
        }
        else
        {
            <Line @ref="_temperatureChart" Data="_actualAndPredictedTemperature" Config="_temperatureDataLineConfig"/>
            <Line @ref="_humidityChart" Data="_actualAndPredictedHumidity" Config="_humidityDataLineConfig"/>
            <Line @ref="_accuracyChart" Data="_temperatureAndHumidityAccuracy" Config="_accuracyLineConfig"/>

            <br/>

            <PaginationComponent RecordsCount=@_monitoringsRecordsCount
                                 RecordsPerPage=@RecordsCount
                                 PageChanged=@OnPageChanged/>

            <br/>
        }
    </Authorized>
    <NotAuthorized>
        Вы не вошли в систему
    </NotAuthorized>
</AuthorizeView>

@code{
    private const int RecordsCount = 15;
    private const int RecordsRequestBeginningIndex = 0;

    private ConfigsDTO _config;

    private List<MonitoringWithAccuracyDTO> _monitorings;

    private Line _temperatureChart;
    private Line _humidityChart;
    private Line _accuracyChart;

    private LineConfig _temperatureDataLineConfig;
    private LineConfig _humidityDataLineConfig;
    private LineConfig _accuracyLineConfig;

    private List<GraphicData> _actualAndPredictedTemperature;
    private List<GraphicData> _actualAndPredictedHumidity;
    private List<GraphicData> _temperatureAndHumidityAccuracy;

    private int _monitoringsRecordsCount;

    protected override async Task OnInitializedAsync()
    {
        _config = await ConfigService.GetConfigAsync();

        _monitoringsRecordsCount = await MicroclimateService.GetMonitoringsCount();

        _monitorings = await MicroclimateService.GetMonitoringsWithAccuraciesAsync(RecordsRequestBeginningIndex, RecordsCount);

        await UpdateGraphics();
    }

    private async Task UpdateGraphics()
    {
        _actualAndPredictedTemperature = AntChartHelper.GetTemperatureData(_monitorings, _config);
        _actualAndPredictedHumidity = AntChartHelper.GetHumidityData(_monitorings, _config);
        _temperatureAndHumidityAccuracy = AntChartHelper.GetAccuracyData(_monitorings);

        _temperatureDataLineConfig = AntChartHelper.GetTemperatureLineConfig(_actualAndPredictedTemperature);
        _humidityDataLineConfig = AntChartHelper.GetHumidityLineConfig(_actualAndPredictedHumidity);
        _accuracyLineConfig = AntChartHelper.GetAccuracyConfig(_temperatureAndHumidityAccuracy);

        await _temperatureChart.ChangeData(_actualAndPredictedTemperature);
        await _humidityChart.ChangeData(_actualAndPredictedHumidity);
        await _accuracyChart.ChangeData(_temperatureAndHumidityAccuracy);
    }

    private async Task OnPageChanged(RecordsRequest request)
    {
        _monitorings = await MicroclimateService.GetMonitoringsWithAccuraciesAsync(request.RecordsOffset, request.RecordsCount);

        await UpdateGraphics();
    }

}