@page "/graphicspage"
@using ClimateControlSystem.Client.PaginationNavigation;
@using ClimateControlSystem.Client.Resources
@using ClimateControlSystem.Client.Components
@inject IMicroclimateService MicroclimateService
@inject IConfigService ConfigService

<PageTitle>Graphics Page</PageTitle>

<h3>Графики прогнозов</h3>

<AuthorizeView>
    <Authorized>
        @if (_predictions == null)
        {
            <p><em>Загрузка...</em></p>
        }
        else
        {
            <Line @ref="_temperatureChart" Data="_actualAndPredictedTemperature" Config="_temperatureDataLineConfig" />
            <Line @ref="_humidityChart" Data="_actualAndPredictedHumidity" Config="_humidityDataLineConfig"/>
            <Line @ref="_accuracyChart" Data="_temperatureAndHumidityAccuracy" Config="_accuracyLineConfig" />

            <br />

            <PaginationComponent RecordsCount=@_monitoringsRecordsCount
                RecordsPerPage=@RecordsPerGraphic
                PageChanged=@OnPageChanged />

            <br />
        }
    </Authorized>
    <NotAuthorized>
        Вы не вошли в систему
    </NotAuthorized>
</AuthorizeView>

@code{
    private const int RecordsPerGraphic = 15;

    private ConfigResponse _config;

    private List<PredictionResponse> _predictions;

    private Line _temperatureChart;
    private Line _humidityChart;
    private Line _accuracyChart;

    private LineConfig _temperatureDataLineConfig;
    private LineConfig _humidityDataLineConfig;
    private LineConfig _accuracyLineConfig;

    private List<GraphicData> _actualAndPredictedTemperature;
    private List<GraphicData> _actualAndPredictedHumidity;
    private List<GraphicData> _temperatureAndHumidityAccuracy;

    private int _monitoringsRecordsCount;

    protected override async Task OnInitializedAsync()
    {
        _config = await ConfigService.GetConfigAsync();

        _monitoringsRecordsCount = await MicroclimateService.GetMonitoringsCount();

        _predictions = (await MicroclimateService.GetMonitoringsAsync(0, RecordsPerGraphic)).ToList();

        UpdateGraphics();
    }

    private async Task UpdateGraphics()
    {
        _actualAndPredictedTemperature = AntChartHelper.GetTemperatureData(_predictions, _config);
        _actualAndPredictedHumidity = AntChartHelper.GetHumidityData(_predictions, _config);
        _temperatureAndHumidityAccuracy = AntChartHelper.GetAccuracyData(_predictions);

        _temperatureDataLineConfig = AntChartHelper.GetTemperatureLineConfig(_actualAndPredictedTemperature);
        _humidityDataLineConfig = AntChartHelper.GetHumidityLineConfig(_actualAndPredictedHumidity);
        _accuracyLineConfig = AntChartHelper.GetAccuracyConfig(_temperatureAndHumidityAccuracy);

        await _temperatureChart.ChangeData(_actualAndPredictedTemperature);
        await _humidityChart.ChangeData(_actualAndPredictedHumidity);
        await _accuracyChart.ChangeData(_temperatureAndHumidityAccuracy);
    }

    private async Task OnPageChanged(RecordsRequest request)
    {
        _predictions = (await MicroclimateService.GetMonitoringsAsync(request.RecordsOffset, request.RecordsCount)).ToList();

        UpdateGraphics();
    }
}
