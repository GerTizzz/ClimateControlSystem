@page "/user"
@page "/user/{id:int}"
@using WebClient.Services.UsersService
@using Microsoft.AspNetCore.Components
@using global::Shared.Dtos
@attribute [Authorize(Roles = "Admin")]
@inject IUsersService UsersService

@if (Id == null)
{
    <PageTitle>Создание нового пользователя</PageTitle>
    <h3>Создайте нового пользователя</h3>
}
else
{
    <PageTitle>Редактировать @_user.Name</PageTitle>
    <h3>Редактировать @_user.Name</h3>
}

<EditForm Model="_user" OnSubmit="HandleSubmit">
    <div>
        <label for="name">Имя</label>
        <InputText id="name" @bind-Value="_user.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="role">Роль</label>
        <InputSelect id="role" @bind-Value="_user.Role" class="form-control">
            <option>Admin</option>
            <option>Operator</option>
        </InputSelect>
    </div>
    <div>
        <label for="password">Пароль</label>
        <InputText id="password" @bind-Value="_user.Password" class="form-control"></InputText>
    </div>
    <br/>
    <button type="submit" class="btn btn-primary">@_btnText</button>
    <button type="button" class="btn btn-danger" @onclick="DeleteUser">Удалить пользователя</button>
</EditForm>

@code {

    [Parameter]
    public string Id { get; set; }

    private readonly UserDto _user;

    private string _btnText = string.Empty;

    protected override Task OnInitializedAsync()
    {
        _btnText = string.IsNullOrEmpty(Id) ? "Создать пользователя" : "Редактировать пользователя";
        return Task.CompletedTask;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            return;
        }
        
        var arrivedUser = await UsersService.GetUser(Id);

        if (arrivedUser is null)
        {
            return;
        }
        
        _user.Role = arrivedUser.Role;
        _user.Name = arrivedUser.Name;
        _user.Password = string.Empty;
        _user.Id = arrivedUser.Id;
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await UsersService.CreateUser(_user);
        }
        else
        {
            await UsersService.UpdateUser(_user);
        }
    }

    async Task DeleteUser()
    {
        await UsersService.DeleteUser(_user.Id);
    }

}