@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text
@using WebClient.Helpers
@using WebClient.Resources
@using WebClient.Services.ConfigService

@implements IAsyncDisposable

@inject NavigationManager NavigationManager
@inject IForecastService ForecastService
@inject IConfigService ConfigService
@inject IJSRuntime JsRuntime

<PageTitle>Monitoring Page</PageTitle>

<h3>Панель мониторинга</h3>

<AuthorizeView>
    <Authorized>
        @if (_temperatureRenderableSeries.Any() is false ||
             _humidityRenderableSeries.Any() is false)
        {
            <p>
                <em>Загрузка...</em>
            </p>
        }
        else
        {
            <Line @ref="_temperatureChart" Data="_temperatureRenderableSeries" Config="_temperatureDataLineConfig"/>
            <Line @ref="_humidityChart" Data="_humidityRenderableSeries" Config="_humidityDataLineConfig"/>
        }
    </Authorized>
    <NotAuthorized>
        Вы не вошли в систему
    </NotAuthorized>
</AuthorizeView>

@code {
    private const int RecordsCount = 15;
    private const int RecordsRequestBeginningIndex = 0;

    private ConfigsDto _config;

    private Line _temperatureChart;
    private Line _humidityChart;

    private LineConfig _temperatureDataLineConfig;
    private LineConfig _humidityDataLineConfig;

    private readonly List<GraphicData> _temperatureRenderableSeries = new();
    private readonly List<GraphicData> _humidityRenderableSeries = new();

    private readonly List<ForecastDto> _forecasts = new();

    private HubConnection? _forecastConnection;

    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authState;

        if (authState.User.Identity is {IsAuthenticated: true })
        {
            _config = await ConfigService.GetConfigAsync();
            _forecasts.AddRange(await ForecastService.GetForecastsAsync(RecordsRequestBeginningIndex, RecordsCount));
            _forecasts.Reverse();
            _forecasts.Capacity = RecordsCount;

            UpdateRenderableSeries();
            UpdateChartsConfigs();

            await CreateForecastConnection();
        }
    }

    private async Task CreateForecastConnection()
    {
        _forecastConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/forecasthub"))
            .WithAutomaticReconnect()
            .Build();

        _forecastConnection.On<ForecastDto>("GetNewForecast", ForecastArrived);

        await _forecastConnection.StartAsync();
    }

    private async Task ForecastArrived(ForecastDto forecast)
    {
        try
        {
            _ = Task.Run(() => ShowWarning(forecast));

            AddForecast(forecast);

            await UpdateCharts();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private void AddForecast(ForecastDto newForecast)
    {
        if (_forecasts is null)
        {
            return;
        }

        if (_forecasts.Any())
        {
            var lastForecast = _forecasts.Last();

            var forecast = new ForecastDto()
            {
                Label = lastForecast.Label,
                Fact = newForecast.Fact,
                Time = newForecast.Time
            };

            _forecasts.Remove(lastForecast);
            _forecasts.Add(forecast);
        }
        else
        {
            _forecasts.Add(newForecast);
        }

        _forecasts.Add(newForecast);

        RemoveExtraForecasts();
    }

    private async Task ShowWarning(ForecastDto forecast)
    {
        try
        {
            if (forecast.Warning is null)
            {
                return;
            }
            
            await JsRuntime.InvokeVoidAsync("Alert", forecast.Warning.Message);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private void RemoveExtraForecasts()
    {
        while (_forecasts.Count >= _forecasts.Capacity)
        {
            _forecasts.RemoveAt(0);
        }
    }

    private async Task UpdateCharts()
    {
        UpdateRenderableSeries();
        UpdateChartsConfigs();
        await RerenderCharts();
    }

    private void UpdateRenderableSeries()
    {
        _temperatureRenderableSeries.Clear();
        _temperatureRenderableSeries.AddRange(AntDataHelper.GetTemperature(_forecasts, _config));

        _humidityRenderableSeries.Clear();
        _humidityRenderableSeries.AddRange(AntDataHelper.GetHumidity(_forecasts, _config));
    }

    private void UpdateChartsConfigs()
    {
        if (_temperatureRenderableSeries.Any())
        {
            _temperatureDataLineConfig = AntConfigHelper.GetTemperatureLineConfig(_temperatureRenderableSeries);
        }
        if (_humidityRenderableSeries.Any())
        {
            _humidityDataLineConfig = AntConfigHelper.GetHumidityLineConfig(_humidityRenderableSeries);
        }
    }

    private async Task RerenderCharts()
    {
        await _temperatureChart.ChangeData(_temperatureRenderableSeries);
        await _humidityChart.ChangeData(_humidityRenderableSeries);
    }

    public async ValueTask DisposeAsync()
    {
        if (_forecastConnection is not null)
        {
            await _forecastConnection.DisposeAsync();
        }

        _forecasts.Clear();
        _temperatureRenderableSeries.Clear();
        _humidityRenderableSeries.Clear();
    }
}