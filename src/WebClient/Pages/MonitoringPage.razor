@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text
@using WebClient.Helpers
@using WebClient.Resources
@using WebClient.Services.ConfigService
@using WebClient.Services.FeaturesService

@implements IAsyncDisposable

@inject NavigationManager NavigationManager
@inject IForecastService ForecastService
@inject IFeatureService FeatureService
@inject IConfigService ConfigService
@inject IJSRuntime JsRuntime

<PageTitle>Monitoring Page</PageTitle>

<h3>Панель мониторинга</h3>

<AuthorizeView>
    <Authorized>
        @if (_temperatureGraphicData.Any() is false)
        {
            <p>
                <em>Загрузка...</em>
            </p>
        }
        else
        {
            <h4 align="center">Прогноз температуры на ближайший час</h4>

            <Line @ref="_temperatureChart" Data="_temperatureGraphicData" Config="_temperatureLineConfig"/>

            if (_forecast is not null)
            {
                <table class="table-bordered" align="center">
                    <thead>
                        <tr>
                            <th style="word-wrap:break-word; font-size:small; text-align:center">Вемя</th>
                            <th style="word-wrap:break-word; font-size:small; text-align:center">Прогноз</th>
                            <th style="word-wrap:break-word; font-size:small; text-align:center">Предупреждение</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < _forecast.Predictions.Count; i++)
                        {
                            var predictionTime = _forecast.Time.AddMinutes(10 * (i + 1));

                            <tr>
                                <td style="font-size:small; text-align:center">
                                    @predictionTime.ToString("HH:mm:ss dd.MM.yyyy")
                                </td>
                                <td style="font-size:small; text-align:center">
                                    @_forecast.Predictions[i].Value.ToString()
                                </td>
                                <td style="font-size:small; text-align:center">
                                    @_forecast.Predictions[i].Warning?.Message.ToString()
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }
    </Authorized>
    <NotAuthorized>
        Вы не вошли в систему
    </NotAuthorized>
</AuthorizeView>

@code {
    private const int RecordsCount = 1;
    private const int FeaturesOffset = 1;
    private const int FeaturesCount = 72;
    private const int RecordsRequestBeginningIndex = 0;

    private ConfigsDto _config;

    private Line _temperatureChart;
    private LineConfig _temperatureLineConfig;
    private List<GraphicData> _temperatureGraphicData;

    private ForecastDto? _forecast;

    private List<FeaturesDto> _features;

    private HubConnection? _forecastConnection;

    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authState;

        if (authState.User.Identity is { IsAuthenticated: true })
        {
            _temperatureGraphicData = new List<GraphicData>();

            _config = await ConfigService.GetConfigAsync();

            _forecast = await ForecastService.GetForecastAsync(RecordsRequestBeginningIndex);

            _features = await FeatureService.GetFeaturesAsync(RecordsRequestBeginningIndex + FeaturesOffset, FeaturesCount - FeaturesOffset);

            UpdateRenderableSeries();

            UpdateChartsConfigs();

            await CreateForecastConnection();
        }
    }

    private async Task CreateForecastConnection()
    {
        _forecastConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/forecasthub"))
            .WithAutomaticReconnect()
            .Build();

        _forecastConnection.On<ForecastDto>("GetNewForecast", ForecastArrived);

        await _forecastConnection.StartAsync();
    }

    private async Task ForecastArrived(ForecastDto forecast)
    {
        try
        {
            _ = Task.Run(() => ShowWarning(forecast));

            if (forecast is not null)
            {
                _forecast = forecast;

                _features.RemoveAt(0);

                _features.Add(forecast.Feature);

                await UpdateCharts();
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task ShowWarning(ForecastDto forecast)
    {
        try
        {
            if (forecast.Predictions is null || forecast.Predictions.FirstOrDefault() is null)
            {
                return;
            }

            await JsRuntime.InvokeVoidAsync("Alert", forecast.Predictions.First().Warning.Message);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private async Task UpdateCharts()
    {
        UpdateRenderableSeries();

        UpdateChartsConfigs();

        await RerenderCharts();
    }

    private void UpdateRenderableSeries()
    {
        _temperatureGraphicData.Clear();

        _temperatureGraphicData.AddRange(AntDataHelper.GetHistoryData(_forecast.Time, _features, _config));

        _temperatureGraphicData.AddRange(AntDataHelper.GetPredictedData(_forecast, _config));
    }

    private void UpdateChartsConfigs()
    {
        if (_temperatureGraphicData.Any())
        {
            _temperatureLineConfig = AntConfigHelper.GetLineConfig(_temperatureGraphicData);
        }
    }

    private async Task RerenderCharts()
    {
        await _temperatureChart.ChangeData(_temperatureGraphicData);
    }

    public async ValueTask DisposeAsync()
    {
        if (_forecastConnection is not null)
        {
            await _forecastConnection.DisposeAsync();
        }

        if (_temperatureGraphicData is not null)
        {
            _temperatureGraphicData.Clear();
        }
    }
}