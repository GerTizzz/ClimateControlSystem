@page "/graphicspage"
@using WebClient.Helpers
@using WebClient.PaginationNavigation
@using WebClient.Resources
@using WebClient.Services.ConfigService
@inject IForecastService ForecastService
@inject IConfigService ConfigService

<PageTitle>Graphics Page</PageTitle>

<h3>Графики прогнозов</h3>

<AuthorizeView>
    <Authorized>
        @if (_isInitialized is false)
        {
            <strong style="text-align:center; align-self:center">
                Загрузка...
            </strong>
        }
        else if (_forecasts is null || _forecasts.Any() is false)
        {
            <strong style="text-align:center; font-size:large">
                Нет данных для отображения...
            </strong>
        }
        else
        {
            <Line @ref="_temperatureChart" Data="_temperatureData" Config="_temperatureConfig"/>

            <br/>

            <PaginationComponent RecordsCount=@_forecastsCount
                                 RecordsPerPage=@RecordsPerPage
                                 PageChanged=@OnPageChanged/>

            <br/>
        }
    </Authorized>
    <NotAuthorized>
        Вы не вошли в систему
    </NotAuthorized>
</AuthorizeView>

@code{
    private const int RecordsPerPage = 15;
    private const int StartRecordsRequestCount = 0;

    private ConfigsDto _config;

    private List<ForecastDto> _forecasts;

    private Line _temperatureChart;

    private LineConfig _temperatureConfig;

    private List<GraphicData> _temperatureData;

    private long _forecastsCount;

    private bool _isInitialized;

    protected override async Task OnInitializedAsync()
    {
        _config = await ConfigService.GetConfigAsync();

        _forecastsCount = await ForecastService.GetForecastsCountAsync();

        _forecasts = await ForecastService.GetForecastsAsync(StartRecordsRequestCount, RecordsPerPage);
        _forecasts.Reverse();

        if (_forecasts.Any())
        {
            SetGraphicsConfigs();
        }

        _isInitialized = true;
    }

    private void CalculateGraphicsData()
    {
        if (_forecasts is null || _forecasts.Any() is false)
        {
            return;
        }

        if (_config is not null)
        {
            //_temperatureData = AntDataHelper.GetHistoryTemperature(_forecasts, _config).ToList();
        }
    }

    private void SetGraphicsConfigs()
    {
        CalculateGraphicsData();

        _temperatureConfig = AntConfigHelper.GetLineConfig(_temperatureData);
    }

    private async Task OnPageChanged(RecordsRequest request)
    {
        _forecasts = await ForecastService.GetForecastsAsync(request.RecordsOffset, request.RecordsCount);
        
        _forecasts.Reverse();

        await RerenderGraphics();
    }

    private void UpdateGraphicsConfigs()
    {
        CalculateGraphicsData();

        AntConfigHelper.UpdateConfigsMinMaxLimits(ref _temperatureConfig, _temperatureData);
    }

    private async Task RerenderGraphics()
    {
        UpdateGraphicsConfigs();

        await _temperatureChart.ChangeData(_temperatureData);
    }
}