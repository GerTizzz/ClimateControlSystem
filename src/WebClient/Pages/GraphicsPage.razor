@page "/graphicspage"
@using WebClient.Helpers
@using WebClient.PaginationNavigation
@using WebClient.Resources
@using WebClient.Services.ConfigService
@inject IForecastService ForecastService
@inject IConfigService ConfigService

<PageTitle>Graphics Page</PageTitle>

<h3>Графики прогнозов</h3>

<AuthorizeView>
    <Authorized>
        @if (_forecasts is null || _forecasts.Any() is false)
        {
            <p>
                <em>Загрузка...</em>
            </p>
        }
        else
        {
            <Line @ref="_temperatureChart" Data="_temperatureData" Config="_temperatureConfig"/>
            <Line @ref="_humidityChart" Data="_humidityData" Config="_humidityConfig"/>
            <Line @ref="_accuracyChart" Data="_accuracyData" Config="_accuracyConfig"/>

            <br/>

            <PaginationComponent RecordsCount=@_forecastsCount
                                 RecordsPerPage=@RecordsPerPage
                                 PageChanged=@OnPageChanged/>

            <br/>
        }
    </Authorized>
    <NotAuthorized>
        Вы не вошли в систему
    </NotAuthorized>
</AuthorizeView>

@code{
    private const int RecordsPerPage = 15;
    private const int StartRecordsRequestCount = 0;

    private ConfigsDto _config;

    private List<ForecastDto> _forecasts;

    private Line _temperatureChart;
    private Line _humidityChart;
    private Line _accuracyChart;

    private LineConfig _temperatureConfig;
    private LineConfig _humidityConfig;
    private LineConfig _accuracyConfig;

    private List<GraphicData> _temperatureData;
    private List<GraphicData> _humidityData;
    private List<GraphicData> _accuracyData;

    private long _forecastsCount;

    protected override async Task OnInitializedAsync()
    {
        _config = await ConfigService.GetConfigAsync();

        _forecastsCount = await ForecastService.GetForecastsCountAsync();

        _forecasts = await ForecastService.GetForecastsAsync(StartRecordsRequestCount, RecordsPerPage);

        SetGraphicsConfigs();
    }

    private void CalculateGraphicsData()
    {
        _temperatureData = AntDataHelper.GetTemperature(_forecasts, _config).ToList();

        _humidityData = AntDataHelper.GetHumidity(_forecasts, _config).ToList();

        _accuracyData = AntDataHelper.GetError(_forecasts).ToList();
    }

    private void SetGraphicsConfigs()
    {
        CalculateGraphicsData();

        _temperatureConfig = AntConfigHelper.GetTemperatureLineConfig(_temperatureData);
        _humidityConfig = AntConfigHelper.GetHumidityLineConfig(_humidityData);
        _accuracyConfig = AntConfigHelper.GetAccuracyConfig(_accuracyData);
    }

    private async Task OnPageChanged(RecordsRequest request)
    {
        _forecasts = await ForecastService.GetForecastsAsync(request.RecordsOffset, request.RecordsCount);

        await RerenderGraphics();
    }

    private void UpdateGraphicsConfigs()
    {
        CalculateGraphicsData();

        AntConfigHelper.UpdateConfigsMinMaxLimits(ref _temperatureConfig, _temperatureData);
        AntConfigHelper.UpdateConfigsMinMaxLimits(ref _humidityConfig, _humidityData);
        AntConfigHelper.UpdateConfigsMinMaxLimits(ref _accuracyConfig, _accuracyData);
    }

    private async Task RerenderGraphics()
    {
        UpdateGraphicsConfigs();

        await _temperatureChart.ChangeData(_temperatureData);
        await _humidityChart.ChangeData(_humidityData);
        await _accuracyChart.ChangeData(_accuracyData);
    }
}